[ 컴포넌트 ]
    1. 정의 : 리액트에서 독립적이고 재사용 가능한 함수
    2. 특징 : HTML + JS + CSS를 하나의 컴포넌트로 구성

[ 컴포넌트 만들기 ]
    (1) function
    (2) 컴포넌트명 : 아무거나 하되 default 컴포넌트 파일명과 일치
    (3) ( props ) : property속성으로 <컴포넌트 속성=값 속성=값 />
    (4) { } : 중괄호안에서 JS 와 HTML 작성
    (5) return : HTML 과 JS가 혼합된 JSX 문법을 사용할 수 있음.
        JSP(HTML + JAVA) : 부트스트랩
        JSX(HTML + JS) : MUI
    (6) jsx파일내 export default 함수 1개만 정의

    예] 선언적 함수
    export default function Component3 ( props ){
        // ---------> JS 코드 START
        let name = "유재석";
        // <--------- JS 코드 END : return 전까지

        // ---------> JSX 코드 START return 부터는 JSX 문법
        return (<> </>)
        // <--------- JSX 코드 END
    } // func e

    예2] 람다식(화살표) 함수
    export default Component = ( props ) => {
        return ( <> </> )
    }

[ 컴포넌트 불러오기 ]
    (1) 다른 js(jsx) 파일 일때
        export default 컴포넌트 : import 컴포넌트명 from 'jsx파일경로'
        export 컴포넌트 : import { 컴포넌트명 , 컴포넌트명 } from 'jsx파일경로'
        <컴포넌트명 />

    (2) 같은 js(jsx) 파일 일때
        <컴포넌트명 />

[ JSX ]
    1. 컴포넌트 안에서 HTML 과 *비슷한 문법* 을 사용할 수 있도록 만든 확장 문법
    2. 주의할 점 : 브라우저(크롬)가 해석할 수 없음. 그러므로 리액트의 렌더링이 필요함. create.render( <컴포넌트명 /> )
    3. 특징
        1) JSX는 HTML 처럼 보이지만 HTMl과 다름. << 가상 DOM 사용 >>
            조건1 : 마크업/컴포넌트 close(닫기) 필수 사용 , 강력한 검사
                <input >    [x]
                <input />   [o]

            조건2 : 반드시 전체를 감싸는 상위 요소 (dom) 필수
                <div> </div> 또는 <> </> 묶음 처리
                1. return <div> 내용물 </div>
                2. return <> 내용물 </>
                3. 리스트명.map( (반복변수) => {return <> </> } )

            조건3 : 2줄 이상 요소가 되는경우 관례적으로 ( ) 소괄호로 묶음
                return (<>

                        </>);
        2) JSX 문법에서 JS 표현식을 사용 , 표현식이란 정의/선언/생성 부 불가능 { function / let / const }
            <div> { JS코드 } </div>

        3) JSX 주석 , HTML 주석 사용 불가. {}중괄호 안에서 JS주석 사용
            { /* 주석처리 */ }

[ props ]
    1. 정의 : props는 부모 컴포넌트가 자식 컴포넌트에게 데이터를 전달하는 매개변수
    2. 역할 : 컴포넌트의 재사용 , 데이터를 다른 곳으로 내려준다.
    3. 특징 :
        1) 읽기전용 ( 물려받은 props 데이터는 수정 불가능 )
        2) 단방향 ( 자식이 부모에게 전달 불가능 )
    4. 사용법
                function 부모컴포넌트( props ){
                    return ( <> <자식컴포넌트 속성명1 = {값} 속성명2 = {값}/> </> )
                }
            방법1) 부모 컴포넌트로부터 전달받은 속성명과 값이 props 객체내 전달된다.
                function 자식 컴포넌트( props ){ return ( <> </> ) }
            방법2) 부모 컴포넌트로부터 전달받은 속성명과 값이 props 객체내 전달되고 구문분해로 각 변수에 저장된다. (권장)
                function 자식컴포넌트 ( { 속성명1 , 속성명2 } ){ return ( <> </> ) }

[ HTML(가상 DOM) 이벤트 ]
    HTML DOM
        onclick(소문자) , 순수 HTML , 직접 함수
        * onclick = "함수명( )"
    REACT DOM
        onClick(대문자) , 가상 HTML , 함수(참조) 전달
        * onClick = { 함수명 }
        * onCLick = { ( e ) => { 함수명(e , 매개변수); } }
        * onCLick = { ( e ) => { console.log(e); } }





























